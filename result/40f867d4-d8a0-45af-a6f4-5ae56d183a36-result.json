{"name": "test_broken", "status": "broken", "statusDetails": {"message": "TypeError: test_broken() takes 0 positional arguments but 1 was given", "trace": "cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x04017A98>, when = 'call'\nreraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)\n\n    @classmethod\n    def from_call(cls, func, when, reraise=None):\n        #: context of invocation: one of \"setup\", \"call\",\n        #: \"teardown\", \"memocollect\"\n        start = time()\n        excinfo = None\n        try:\n>           result = func()\n\nc:\\python36-32\\lib\\site-packages\\_pytest\\runner.py:220: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nc:\\python36-32\\lib\\site-packages\\_pytest\\runner.py:192: in <lambda>\n    lambda: ihook(item=item, **kwds), when=when, reraise=reraise\nc:\\python36-32\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\python36-32\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\python36-32\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\nc:\\python36-32\\lib\\site-packages\\_pytest\\runner.py:117: in pytest_runtest_call\n    item.runtest()\nc:\\python36-32\\lib\\site-packages\\_pytest\\python.py:1451: in runtest\n    self.ihook.pytest_pyfunc_call(pyfuncitem=self)\nc:\\python36-32\\lib\\site-packages\\pluggy\\hooks.py:286: in __call__\n    return self._hookexec(self, self.get_hookimpls(), kwargs)\nc:\\python36-32\\lib\\site-packages\\pluggy\\manager.py:93: in _hookexec\n    return self._inner_hookexec(hook, methods, kwargs)\nc:\\python36-32\\lib\\site-packages\\pluggy\\manager.py:87: in <lambda>\n    firstresult=hook.spec.opts.get(\"firstresult\") if hook.spec else False,\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\npyfuncitem = <Function test_broken>\n\n    @hookimpl(trylast=True)\n    def pytest_pyfunc_call(pyfuncitem):\n        testfunction = pyfuncitem.obj\n        iscoroutinefunction = getattr(inspect, \"iscoroutinefunction\", None)\n        if iscoroutinefunction is not None and iscoroutinefunction(testfunction):\n            msg = \"Coroutine functions are not natively supported and have been skipped.\\n\"\n            msg += \"You need to install a suitable plugin for your async framework, for example:\\n\"\n            msg += \"  - pytest-asyncio\\n\"\n            msg += \"  - pytest-trio\\n\"\n            msg += \"  - pytest-tornasync\"\n            warnings.warn(PytestUnhandledCoroutineWarning(msg.format(pyfuncitem.nodeid)))\n            skip(msg=\"coroutine function and no async plugin installed (see warnings)\")\n        funcargs = pyfuncitem.funcargs\n        testargs = {arg: funcargs[arg] for arg in pyfuncitem._fixtureinfo.argnames}\n>       testfunction(**testargs)\nE       TypeError: test_broken() takes 0 positional arguments but 1 was given\n\nc:\\python36-32\\lib\\site-packages\\_pytest\\python.py:165: TypeError"}, "start": 1576479604469, "stop": 1576479604469, "uuid": "afa9bcd8-d593-42b7-9aea-dbc03eb541aa", "historyId": "98c097846fd632b4b3d3c4d6d64fa7d5", "fullName": "test_demo.TestShoppingTrolley#test_broken", "labels": [{"name": "feature", "value": "购物车功能"}, {"name": "parentSuite"}, {"name": "suite", "value": "test_demo"}, {"name": "subSuite", "value": "TestShoppingTrolley"}, {"name": "host", "value": "6CR6110JFK"}, {"name": "thread", "value": "8088-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_demo"}]}